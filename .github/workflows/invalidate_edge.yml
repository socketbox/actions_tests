name: Invalidate Edge Cache
on:
  workflow_dispatch:
    inputs:
      paths:
        description: 'Space-delimited paths to invalidate'
        type: string
        default: |
          /explore* 
          /livestream* 
          /show* 
          /my-station* 
          /_next* 
          /video* 
          /search* 
          /api* 
          /
      production:
        description: 'Invalidate production dist.'
        default: false
        type: boolean
      staging:
        description: 'Invalidate staging dist.'
        type: boolean
        default: true
      edcar:
        description: 'Invalidate edcar dist.'
        type: boolean
        default: true
      confirmation:
        description: "Confirm production invalidation"
        required: false
        type: boolean
        default: false

  workflow_call:
    inputs:
      paths:
        description: 'Space-delimited paths to invalidate'
        type: string
        default: |
          /explore* 
          /livestream* 
          /show*
      production:
        description: 'Invalidate production dist.'
        default: false
        type: boolean
      staging:
        description: 'Invalidate staging dist.'
        type: boolean
        default: true
      edcar:
        description: 'Invalidate edcar dist.'
        type: boolean
        default: true
      confirmation:
        description: "Confirm production invalidation"
        required: false
        type: boolean
        default: false

permissions:
  id-token: write

jobs:
  # because of limitations in jobs.<job>.if
  define-matrix:
    runs-on: ubuntu-latest
    outputs:
      #https://github.com/actions/github-script?tab=readme-ov-file#reading-step-results
      edges: ${{steps.build-matrix.outputs.result}}
    steps:
      - name: Build matrix
        id: build-matrix
        shell: python
        run: |
          import json
          import os
          
          production = os.environ.get('INPUT_PRODUCTION', '').lower()
          confirmation = os.environ.get('INPUT_CONFIRMATION', '').lower()
          staging = os.environ.get('INPUT_STAGING', '').lower()
          edcar = os.environ.get('INPUT_EDCAR', '').lower()

          print(f"production: {production}")
          print(f"confirmation: {confirmation}")
          print(f"staging: {staging}")
          print(f"edcar: {edcar}")

          edges = []
          if production == 'true' and confirmation == 'true':
              edges.append('pbs-digi-prod')
          if staging == 'true':
              edges.append('pbs-digi-preprod')
          if edcar == 'true':
              edges.append('pbs-edcar')

          print(f"edges: {edges}")

          with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
            print(f'result={json.dumps(edges)}', file=fh)
        env:
          INPUT_PRODUCTION: ${{ inputs.production }}
          INPUT_CONFIRMATION: ${{ inputs.confirmation }}
          INPUT_STAGING: ${{ inputs.staging }}
          INPUT_EDCAR: ${{ inputs.edcar }}

  invalidate-distribution:
    needs: define-matrix
    if: ${{ needs.define-matrix.outputs.edges != '[]' }}
    strategy:
      matrix:
        edge_env: ${{ fromJSON( needs.define-matrix.outputs.edges ) }}
    environment: ${{matrix.edge_env}}
    runs-on: ubuntu-latest
    steps:
      - name: Create CloudFront invalidation (${{matrix.edge_env}})
        id: cloudfront-invalidation
        if: (inputs.production && inputs.confirmation && (matrix.edge_env == 'pbs-digi-prod'))
          || (matrix.edge_env == 'pbs-digi-preprod' && inputs.staging)
          || (matrix.edge_env == 'pbs-edcar' && inputs.edcar)
        run: |
          PATHS=$(echo '${{inputs.paths}}' | tr '\n' ' ')
          echo "aws cloudfront create-invalidation --distribution-id $CF_DISTRIBUTION_ID --paths $PATHS"
          if [[ $? -ne 0 ]]
          then
            echo "Creation of CloudFront invalidation failed"
            exit 1
          fi
        env:
          CF_DISTRIBUTION_ID: ${{vars.CF_DISTRIBUTION_ID}}
